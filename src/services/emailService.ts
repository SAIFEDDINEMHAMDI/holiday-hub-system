
// Service d'email pour les notifications de cong√©s
export interface EmailNotification {
  to: string;
  subject: string;
  content: string;
  leaveRequest: any;
}

export const sendLeaveApprovalEmail = async (leaveRequest: any): Promise<void> => {
  const emailData: EmailNotification = {
    to: 'saiffmhamdi@gmail.com',
    subject: `Cong√© approuv√© - ${leaveRequest.employeeName}`,
    content: `
      Bonjour,

      Nous vous informons que la demande de cong√© suivante a √©t√© approuv√©e :

      Employ√©: ${leaveRequest.employeeName}
      Type de cong√©: ${getLeaveTypeLabel(leaveRequest.leaveType)}
      P√©riode: du ${leaveRequest.startDate} au ${leaveRequest.endDate}
      Dur√©e: ${leaveRequest.days} jour(s)
      Motif: ${leaveRequest.reason}

      ${leaveRequest.managerComment ? `Commentaire du manager: ${leaveRequest.managerComment}` : ''}

      Cordialement,
      Syst√®me de Gestion des Cong√©s
    `,
    leaveRequest
  };

  try {
    // Pour l'instant, on simule l'envoi d'email
    console.log('üìß Email √† envoyer:', emailData);
    
    // TODO: Remplacer par un vrai service d'email une fois Supabase connect√©
    // Exemple avec Supabase Edge Functions:
    /*
    const { data, error } = await supabase.functions.invoke('send-email', {
      body: emailData
    });
    
    if (error) throw error;
    */
    
    // Simulation d'un d√©lai d'envoi
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    console.log('‚úÖ Email envoy√© avec succ√®s √†:', emailData.to);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi de l\'email:', error);
    throw new Error('√âchec de l\'envoi de l\'email de notification');
  }
};

const getLeaveTypeLabel = (type: string) => {
  const labels: Record<string, string> = {
    annual: 'Cong√©s Annuels',
    sick: 'Cong√© Maladie',
    personal: 'Cong√© Personnel',
    maternity: 'Cong√© Maternit√©',
    paternity: 'Cong√© Paternit√©'
  };
  return labels[type] || type;
};
